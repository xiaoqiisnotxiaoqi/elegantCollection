<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.elegantcollection.dao.ShopOrderDao">
  <resultMap id="BaseResultMap" type="com.elegantcollection.entity.ShopOrder">
    <id column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="order_number" jdbcType="BIGINT" property="orderNumber" />
    <result column="cust_id" jdbcType="INTEGER" property="custId" />
    <result column="order_create_time" jdbcType="TIMESTAMP" property="orderCreateTime" />
    <result column="order_price" jdbcType="REAL" property="orderPrice" />
    <result column="order_status" jdbcType="INTEGER" property="orderStatus" />
    <result column="evaluate_status" jdbcType="INTEGER" property="evaluateStatus" />
    <result column="address_id" jdbcType="INTEGER" property="addressId" />
    <result column="discount_amount" jdbcType="VARCHAR" property="discountAmount" />
    <result column="payment_time" jdbcType="TIMESTAMP" property="paymentTime" />
    <result column="outlibrary_time" jdbcType="TIMESTAMP" property="outlibraryTime" />
    <result column="courier_company_id" jdbcType="VARCHAR" property="courierCompanyId" />
    <result column="logistics_id" jdbcType="VARCHAR" property="logisticsId" />
    <result column="expectation_time" jdbcType="TIMESTAMP" property="expectationTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    order_id, order_number, cust_id, order_create_time, order_price, order_status, evaluate_status, 
    address_id, discount_amount, payment_time, outlibrary_time, courier_company_id, logistics_id, 
    expectation_time
  </sql>
  <select id="selectByExample" parameterType="com.elegantcollection.entity.ShopOrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from shop_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from shop_order
    where order_id = #{orderId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from shop_order
    where order_id = #{orderId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.elegantcollection.entity.ShopOrderExample">
    delete from shop_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.elegantcollection.entity.ShopOrder">
    insert into shop_order (order_id, order_number, cust_id, 
      order_create_time, order_price, order_status, 
      evaluate_status, address_id, discount_amount, 
      payment_time, outlibrary_time, courier_company_id, 
      logistics_id, expectation_time)
    values (#{orderId,jdbcType=INTEGER}, #{orderNumber,jdbcType=BIGINT}, #{custId,jdbcType=INTEGER}, 
      #{orderCreateTime,jdbcType=TIMESTAMP}, #{orderPrice,jdbcType=REAL}, #{orderStatus,jdbcType=INTEGER}, 
      #{evaluateStatus,jdbcType=INTEGER}, #{addressId,jdbcType=INTEGER}, #{discountAmount,jdbcType=VARCHAR}, 
      #{paymentTime,jdbcType=TIMESTAMP}, #{outlibraryTime,jdbcType=TIMESTAMP}, #{courierCompanyId,jdbcType=VARCHAR}, 
      #{logisticsId,jdbcType=VARCHAR}, #{expectationTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.elegantcollection.entity.ShopOrder">
    insert into shop_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="orderNumber != null">
        order_number,
      </if>
      <if test="custId != null">
        cust_id,
      </if>
      <if test="orderCreateTime != null">
        order_create_time,
      </if>
      <if test="orderPrice != null">
        order_price,
      </if>
      <if test="orderStatus != null">
        order_status,
      </if>
      <if test="evaluateStatus != null">
        evaluate_status,
      </if>
      <if test="addressId != null">
        address_id,
      </if>
      <if test="discountAmount != null">
        discount_amount,
      </if>
      <if test="paymentTime != null">
        payment_time,
      </if>
      <if test="outlibraryTime != null">
        outlibrary_time,
      </if>
      <if test="courierCompanyId != null">
        courier_company_id,
      </if>
      <if test="logisticsId != null">
        logistics_id,
      </if>
      <if test="expectationTime != null">
        expectation_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="orderNumber != null">
        #{orderNumber,jdbcType=BIGINT},
      </if>
      <if test="custId != null">
        #{custId,jdbcType=INTEGER},
      </if>
      <if test="orderCreateTime != null">
        #{orderCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderPrice != null">
        #{orderPrice,jdbcType=REAL},
      </if>
      <if test="orderStatus != null">
        #{orderStatus,jdbcType=INTEGER},
      </if>
      <if test="evaluateStatus != null">
        #{evaluateStatus,jdbcType=INTEGER},
      </if>
      <if test="addressId != null">
        #{addressId,jdbcType=INTEGER},
      </if>
      <if test="discountAmount != null">
        #{discountAmount,jdbcType=VARCHAR},
      </if>
      <if test="paymentTime != null">
        #{paymentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="outlibraryTime != null">
        #{outlibraryTime,jdbcType=TIMESTAMP},
      </if>
      <if test="courierCompanyId != null">
        #{courierCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="logisticsId != null">
        #{logisticsId,jdbcType=VARCHAR},
      </if>
      <if test="expectationTime != null">
        #{expectationTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.elegantcollection.entity.ShopOrderExample" resultType="java.lang.Long">
    select count(*) from shop_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update shop_order
    <set>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.orderNumber != null">
        order_number = #{record.orderNumber,jdbcType=BIGINT},
      </if>
      <if test="record.custId != null">
        cust_id = #{record.custId,jdbcType=INTEGER},
      </if>
      <if test="record.orderCreateTime != null">
        order_create_time = #{record.orderCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.orderPrice != null">
        order_price = #{record.orderPrice,jdbcType=REAL},
      </if>
      <if test="record.orderStatus != null">
        order_status = #{record.orderStatus,jdbcType=INTEGER},
      </if>
      <if test="record.evaluateStatus != null">
        evaluate_status = #{record.evaluateStatus,jdbcType=INTEGER},
      </if>
      <if test="record.addressId != null">
        address_id = #{record.addressId,jdbcType=INTEGER},
      </if>
      <if test="record.discountAmount != null">
        discount_amount = #{record.discountAmount,jdbcType=VARCHAR},
      </if>
      <if test="record.paymentTime != null">
        payment_time = #{record.paymentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.outlibraryTime != null">
        outlibrary_time = #{record.outlibraryTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.courierCompanyId != null">
        courier_company_id = #{record.courierCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="record.logisticsId != null">
        logistics_id = #{record.logisticsId,jdbcType=VARCHAR},
      </if>
      <if test="record.expectationTime != null">
        expectation_time = #{record.expectationTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update shop_order
    set order_id = #{record.orderId,jdbcType=INTEGER},
    order_number = #{record.orderNumber,jdbcType=BIGINT},
    cust_id = #{record.custId,jdbcType=INTEGER},
    order_create_time = #{record.orderCreateTime,jdbcType=TIMESTAMP},
    order_price = #{record.orderPrice,jdbcType=REAL},
    order_status = #{record.orderStatus,jdbcType=INTEGER},
    evaluate_status = #{record.evaluateStatus,jdbcType=INTEGER},
    address_id = #{record.addressId,jdbcType=INTEGER},
    discount_amount = #{record.discountAmount,jdbcType=VARCHAR},
    payment_time = #{record.paymentTime,jdbcType=TIMESTAMP},
    outlibrary_time = #{record.outlibraryTime,jdbcType=TIMESTAMP},
    courier_company_id = #{record.courierCompanyId,jdbcType=VARCHAR},
    logistics_id = #{record.logisticsId,jdbcType=VARCHAR},
    expectation_time = #{record.expectationTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.elegantcollection.entity.ShopOrder">
    update shop_order
    <set>
      <if test="orderNumber != null">
        order_number = #{orderNumber,jdbcType=BIGINT},
      </if>
      <if test="custId != null">
        cust_id = #{custId,jdbcType=INTEGER},
      </if>
      <if test="orderCreateTime != null">
        order_create_time = #{orderCreateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="orderPrice != null">
        order_price = #{orderPrice,jdbcType=REAL},
      </if>
      <if test="orderStatus != null">
        order_status = #{orderStatus,jdbcType=INTEGER},
      </if>
      <if test="evaluateStatus != null">
        evaluate_status = #{evaluateStatus,jdbcType=INTEGER},
      </if>
      <if test="addressId != null">
        address_id = #{addressId,jdbcType=INTEGER},
      </if>
      <if test="discountAmount != null">
        discount_amount = #{discountAmount,jdbcType=VARCHAR},
      </if>
      <if test="paymentTime != null">
        payment_time = #{paymentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="outlibraryTime != null">
        outlibrary_time = #{outlibraryTime,jdbcType=TIMESTAMP},
      </if>
      <if test="courierCompanyId != null">
        courier_company_id = #{courierCompanyId,jdbcType=VARCHAR},
      </if>
      <if test="logisticsId != null">
        logistics_id = #{logisticsId,jdbcType=VARCHAR},
      </if>
      <if test="expectationTime != null">
        expectation_time = #{expectationTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.elegantcollection.entity.ShopOrder">
    update shop_order
    set order_number = #{orderNumber,jdbcType=BIGINT},
      cust_id = #{custId,jdbcType=INTEGER},
      order_create_time = #{orderCreateTime,jdbcType=TIMESTAMP},
      order_price = #{orderPrice,jdbcType=REAL},
      order_status = #{orderStatus,jdbcType=INTEGER},
      evaluate_status = #{evaluateStatus,jdbcType=INTEGER},
      address_id = #{addressId,jdbcType=INTEGER},
      discount_amount = #{discountAmount,jdbcType=VARCHAR},
      payment_time = #{paymentTime,jdbcType=TIMESTAMP},
      outlibrary_time = #{outlibraryTime,jdbcType=TIMESTAMP},
      courier_company_id = #{courierCompanyId,jdbcType=VARCHAR},
      logistics_id = #{logisticsId,jdbcType=VARCHAR},
      expectation_time = #{expectationTime,jdbcType=TIMESTAMP}
    where order_id = #{orderId,jdbcType=INTEGER}
  </update>
  <select id="selectByBookName" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from shop_order where order_id in(select shop_order_detail.order_id from book left join shop_order_detail on
    book.book_id=shop_order_detail.book_id where book_name like'%${bookName}%') and cust_id= ${custId}
    limit ${pageModel.startRecord} ,${pageModel.pageSize}
  </select>
  <select id="selectByBookName4Size" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from shop_order where order_id in(select shop_order_detail.order_id from book left join shop_order_detail on
    book.book_id=shop_order_detail.book_id where book_name like'%${bookName}%') and cust_id= ${custId}
  </select>

</mapper>